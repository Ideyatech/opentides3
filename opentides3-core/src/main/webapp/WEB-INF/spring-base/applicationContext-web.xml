<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd                 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd                 http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- The controllers are autodetected POJOs labeled with the @Controller 
		annotation. -->
	<context:component-scan base-package="org.opentides.web"
			use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller"
			type="annotation" />
	</context:component-scan>

	<!-- Turns on support for mapping requests to Spring MVC @Controller methods 
		Also registers default Formatters and Validators for use across all @Controllers -->
	<mvc:annotation-driven conversion-service="applicationConversionService">
		<mvc:message-converters>
			<bean class="org.opentides.web.json.ViewAwareJsonMessageConverter" />
		</mvc:message-converters>
		<mvc:argument-resolvers>
			<bean class="org.opentides.web.processor.FormBindMethodProcessor" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
	<!-- Default Converters -->
	<bean id="applicationConversionService" 
			class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters"><set>
			<bean class="org.opentides.bean.converter.BaseEntityToLongConverter"/>
			<bean class="org.opentides.bean.converter.BaseEntityToStringConverter"/>
			<ref bean="stringToBaseEntityConverter" />
        </set></property>
	</bean>
		
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources -->
	<mvc:resources location="/base/css/,/app/css/" mapping="/css/**" />
	<mvc:resources location="/base/js/,/app/js/" mapping="/js/**" />
	<mvc:resources location="/base/img/,/app/img/" mapping="/img/**" />
	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static 
		resource requests to the container's default Servlet -->
	<!-- <mvc:default-servlet-handler /> -->

	<!-- Register "global" interceptor beans to apply to all registered HandlerMappings -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor" />
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
			p:paramName="lang" />
	</mvc:interceptors>
	
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<ref local="applicationMessages" />
		</property>
	</bean>

	<bean id="applicationMessages" class="org.opentides.bean.MergeListFactoryBean">
		<property name="sourceList">
			<list>
				<value>/WEB-INF/languages-base/messages</value>
				<value>/WEB-INF/languages-base/messages-system-codes</value>
				<value>/WEB-INF/languages-base/messages-users</value>
			</list>
		</property>
		<property name="secondList" ref="additionalMessages"/>
	</bean>
	
	<!-- Store preferred language configuration in a cookie -->
	<bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
		id="localeResolver" p:cookieName="locale" />

	<!-- Store preferred theme configuration in a cookie -->
	<bean id="themeSource" 
		class="org.springframework.ui.context.support.ResourceBundleThemeSource" 
		p:basenamePrefix="app/themes/"/>
	
	<bean id="themeResolver"
		class="org.springframework.web.servlet.theme.CookieThemeResolver" 
		p:cookieName="theme" p:defaultThemeName="default" />

	<!-- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
	<bean class="org.opentides.web.AlertingExceptionResolver" 
			p:defaultErrorView="uncaughtException"> 
		<property name="exceptionMappings"> 
		<props> 
			<prop key=".DataAccessException">dataAccessFailure</prop> 
			<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop> 
			<prop key=".TypeMismatchException">dataAccessFailure</prop> 
			<prop key=".MissingServletRequestParameterException">resourceNotFound</prop> 
			<prop key="java.lang.Exception">uncaughtException</prop> 
		</props> 
		</property> 
	</bean>
	
	<!-- Selects a static view for rendering without the need for an explicit controller -->
	<!-- <mvc:view-controller path="/" view-name="index" /> -->
	<mvc:view-controller path="/uncaughtException" /> 
	<mvc:view-controller path="/resourceNotFound" /> 
	<mvc:view-controller path="/dataAccessFailure" />
	<mvc:view-controller path="/login" />
	
	<!-- Default View Resolver -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="cache" value="false" />
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- Support for JsonView -->	
	<bean class="org.opentides.web.json.JsonViewSupportFactoryBean" />

	<!-- Enable this for integration of file upload functionality -->
	<bean id="multipartResolver" 
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
			
</beans>
