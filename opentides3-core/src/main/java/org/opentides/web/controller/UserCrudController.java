/*
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.    
 */
package org.opentides.web.controller;

import java.util.List;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.opentides.bean.user.BaseUser;
import org.opentides.bean.user.UserCredential;
import org.opentides.bean.user.UserGroup;
import org.opentides.service.UserGroupService;
import org.opentides.service.UserService;
import org.opentides.util.StringUtil;
import org.opentides.web.validator.UserValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

/**
 * This is the controller class for {@link BaseUser}. It extends the
 * {@link BaseCrudController} class. Mapped to {@code /organization/users}.
 * Scaffold generated by opentides3 on Jan 16, 2013 12:40:25. 
 * @author opentides
 */
@Controller 
@RequestMapping("/organization/users")
public class UserCrudController extends BaseCrudController<BaseUser> {

	@Autowired
	private UserGroupService userGroupService;
	
	/**
	 * Post construct that initializes the crud page to {@code /base/user-crud}.
	 */
	@PostConstruct
	public void init() {
		singlePage = "/base/user-crud";
	}
	
	/**
	 * Method stub that returns a list of all the user groups.
	 * @return list of user groups
	 */
	@ModelAttribute("userGroupsList")
	public List<UserGroup> getUserGroupsList() {
		return userGroupService.findAll();
	}
	
	@Autowired
	public void setService(UserService userService) {
		this.service = userService;
	}
	
	@Autowired
	public void setValidator(UserValidator userValidator) {
		this.formValidator = userValidator;
	}
	
	/* (non-Javadoc)
	 * @see org.opentides.web.controller.BaseCrudController#preCreate(org.opentides.bean.BaseEntity)
	 */
	/**
	 * Responsible for changing the password of the {@code BaseUser} if a 
	 * {@code newPassword} is set.
	 * 
	 * @param command
	 */
	@Override
	protected void preCreate(BaseUser command) {
		UserCredential credential = command.getCredential();
		if (!StringUtil.isEmpty(credential.getNewPassword()))
			credential.setPassword(((UserService)service).encryptPassword(credential.getNewPassword()));
	}


	/* (non-Javadoc)
	 * @see org.opentides.web.controller.BaseCrudController#preUpdate(org.opentides.bean.BaseEntity)
	 */
	/**
	 * Responsible for changing the password of the {@code BaseUser} if a 
	 * {@code newPassword} is set.
	 * 
	 * @param command
	 */
	@Override
	protected void preUpdate(BaseUser command) {
		UserCredential credential = command.getCredential();
        if (!StringUtil.isEmpty(credential.getNewPassword()))
            credential.setPassword(((UserService)service).encryptPassword(credential.getNewPassword()));
	}
	
	/* (non-Javadoc)
	 * @see org.opentides.web.controller.BaseCrudController#onLoadSearch(org.opentides.bean.BaseEntity, org.springframework.validation.BindingResult, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
	 */
	/**
	 * Method that adds to the model parameter {@code uiModel} the results {@code results} 
	 * of {@link BaseCrudController } search method.
	 */
	@Override
	protected void onLoadSearch(BaseUser command, BindingResult bindingResult, 
			Model uiModel, HttpServletRequest request,
			HttpServletResponse response) {
		uiModel.addAttribute("results", search(command, request));
	}

}
