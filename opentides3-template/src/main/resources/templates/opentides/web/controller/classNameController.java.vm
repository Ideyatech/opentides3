/**
 * 
 */
package ${bean.package_}.web.controller;

import ${bean.modelPackage}.${bean.className};
import org.opentides.controller.BaseCrudController;
#if	( $bean.containsDate() )
import java.util.Date;
#end
#if	( $bean.containsList() )
import java.util.HashMap;
import java.util.Map;
#end
#if ( $bean.containsByOptions() )
import java.util.ArrayList;
import java.util.List;
#end
#if ( $bean.containsDate() )
import java.text.SimpleDateFormat;
#end
#if	( $bean.containsList() || $bean.containsDate() )

import javax.servlet.http.HttpServletRequest;
#end
#if	( $bean.containsByCategory() )
import org.opentides.bean.SystemCodes;
import org.opentides.editor.SystemCodeEditor;
#end
#if	( $bean.containsByObject() )
import org.opentides.editor.BaseEntityEditor;	
#foreach( $field in $objectFields )
import ${field.objectPackage}.${field.objectClass};
import ${field.objectPackage.replaceAll("bean","service")}.${field.objectClass}Service;
#end
#end
#if ( $bean.containsDate() )
import org.springframework.beans.propertyeditors.CustomDateEditor;
#end
#if	( $bean.containsList() )
import org.springframework.validation.Errors;
#end
#if	( $bean.containsByCategory() || $bean.containsDate() )
import org.springframework.web.bind.ServletRequestDataBinder;
#end

/**
 * This is the controller class for ${bean.className}.
 * Scaffold generated by opentides3 on ${dateToday}. 
 * @author opentides
 */
 
public class ${bean.className}Controller extends BaseCrudController<${bean.className}> {
#foreach( $field in $objectFields )
	private ${field.objectClass}Service ${field.objectName}Service;
#end
## Override referenceData when category/options is used as a parameter in field annotation.
#if ( $containsList() )
	
	/* (non-Javadoc)
	 * @see org.opentides.controller.BaseCrudController\#referenceData(javax.servlet.http.HttpServletRequest, java.lang.Object, org.springframework.validation.Errors)
	 */
	@SuppressWarnings("unchecked")
	@Override
	protected Map referenceData(HttpServletRequest request, Object command,
			Errors errors) throws Exception {
		Map<String, Object> model = new HashMap<String, Object>();
#foreach( $field in $fields )
#if ( ${field.isByCategory} )
		model.put("${field.fieldName}List", getSystemCodesByCategory("${field.categoryName}"));
#elseif ( ${field.isByOptions} )
		List<String> ${field.fieldName} = new ArrayList<String>();
#foreach( $item in ${field.options} )
		${field.fieldName}.add("$item");
#end
		model.put("${field.fieldName}List", ${field.fieldName});
#elseif( ${field.isByObject} )
		model.put("${field.fieldName}List", ${field.objectName}Service.findAll());
#end
#end
		return model;
	}
#end

#if	( $initializing )
	/*
	 * (non-Javadoc)
	 * 
	 * @see org.springframework.web.servlet.mvc.AbstractFormController\#formBackingObject(javax.servlet.http.HttpServletRequest)
	 */
	@Override
	protected Object formBackingObject(HttpServletRequest request)
			throws Exception {
		String action = getAction(request);
		if (READ.equals(action) || UPDATE.equals(action)) {
			return getService().load(request.getParameter(ID));
		} else {
			${className} object = new ${className}();
#foreach( $field in $fields )
#if ($field.initializer)
			object.${field.setterName}(${field.initializer});
#end
#end
			return object;
		}
	}
#end


#if	( $bean.containsByCategory() || $bean.containsByObject() || $bean.containsDate() )
	
	/* (non-Javadoc)
	 * @see org.springframework.web.servlet.mvc.BaseCommandController\#initBinder(javax.servlet.http.HttpServletRequest, org.springframework.web.bind.ServletRequestDataBinder)
	 */
	@Override
	protected void initBinder(HttpServletRequest request,
			ServletRequestDataBinder binder) throws Exception {
#if	( $bean.containsByCategory() )			
		binder.registerCustomEditor(SystemCodes.class, new SystemCodeEditor(this.getSystemCodesService()));
#end
#if	( $bean.containsByObject() )	
#foreach( $field in $objectFields )
		binder.registerCustomEditor(${field.objectClass}.class, new BaseEntityEditor(this.${field.objectName}Service));
#end
#end
#if ( $bean.containsDate() )
#foreach( $field in $fields )
#if ( $field.isDate )
		binder.registerCustomEditor(Date.class, "${field.fieldName}",
				new CustomDateEditor(new SimpleDateFormat("${field.dateFormat}"), true));
#end
#end
#end	
	}
#end

#if	( $containsByObject )
#foreach( $field in $objectFields )
	/**
	 * @param ${field.objectName} the ${field.objectName} to set
	 */
	public void set${field.objectClass}Service(${field.objectClass}Service ${field.objectName}Service) {
		this.${field.objectName}Service = ${field.objectName}Service;
	}
#end
#end
}