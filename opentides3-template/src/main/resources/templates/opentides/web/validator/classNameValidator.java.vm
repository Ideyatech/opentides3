/* 
 * ${bean.className}Validator.java
 */
package ${bean.package_}.web.validator;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;
import org.springframework.stereotype.Component;
import org.opentides.util.StringUtil;

#set ( $includeValidator = 0 )
#set ( $includeString = 0 )
#foreach( ${field} in ${bean.fields} )
${field.fieldName}
	#if (${field.getAttribute("isEmailFormat")} == true || 
		${field.getAttribute("isNumberFormat")} == true || 
		${field.getAttribute("rejectPastDate")} == true ||
		${field.getAttribute("rejectFutureDate")} == true ||
		${field.getAttribute("maxLength")} == true ||
		${field.getAttribute("minAllowValue")} == true ||
		${field.getAttribute("maxAllowValue")} == true )
		#set ( $includeString = 1 )
		String!!!
	#end

	#if (${field.getAttribute("isEmailFormat")} == true || 
		${field.getAttribute("isNumberFormat")} == true || 
		${field.getAttribute("rejectPastDate")} == true ||
		${field.getAttribute("rejectFutureDate")} == true )
		#set ( $includeValidator = 1 )
		Validator!!!!
	#end	
#end
## End of foreach loop.

#if ( $includeValidator != 0 )
import org.opentides.util.ValidatorUtil;
#end
## End of outer if statement

import ${bean.modelPackage}.${bean.className};

/**
 * This is the validator for ${bean.className}.
 * Scaffold generated by opentides3 on ${dateToday}. 
 * @author opentides
 */
@Component("${bean.modelName}Validator")
public class ${bean.className}Validator implements Validator {

	@SuppressWarnings("rawtypes")
	public boolean supports(Class clazz) {
		return ${bean.className}.class.isAssignableFrom(clazz);
	}

	public void validate(Object clazz, Errors errors) {
#if ( $includeString != 0 )
		${bean.className} ${bean.modelName} = (${bean.className}) clazz;
#end
#foreach( ${field} in ${bean.fields} )
${field.fieldName}
#if ( ${field.getAttribute("isRequired")} == true)
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "${field.fieldName}", "error.required", new Object[]{"${field.label}"});
#end
#if ( ${field.getAttribute("isEmailFormat")} == true )
		if (!StringUtil.isEmpty(${bean.modelName}.${field.getterName}()) && !ValidatorUtil.isEmail(${bean.modelName}.${field.getterName}())) {
			errors.reject("error.invalid-email-address", new Object[]{${field.getAttribute("label")}}, "${field.fieldName}");
		}
#end
#if ( ${field.getAttribute("isNumberFormat")} == true)
		if (${bean.modelName}.${field.getterName}()!=null && !StringUtil.isEmpty(${bean.modelName}.${field.getterName}()+"") && !ValidatorUtil.isNumeric(""+${bean.modelName}.${field.getterName}())) {
			errors.reject("error.non-numeric-input", new Object[]{${field.getAttribute("label")}}, "${field.fieldName}");
		}
#end
#if ( ${field.getAttribute("rejectPastDate")} == true)
		if(${bean.modelName}.${field.getterName}()!=null && !StringUtil.isEmpty(${bean.modelName}.${field.getterName}()+"") && !ValidatorUtil.checkDate(${bean.modelName}.${field.getterName}(), true)) {
			errors.reject("error.invalid-past-date", new Object[]{${field.getAttribute("label")}}, "${field.fieldName}");
		}
#end
#if ( ${field.getAttribute("rejectFutureDate")} == true)
		if(${bean.modelName}.${field.getterName}()!=null && !StringUtil.isEmpty(${bean.modelName}.${field.getterName}()+"") && !ValidatorUtil.checkDate(${bean.modelName}.${field.getterName}(), false)) {
			errors.reject("error.invalid-future-date", new Object[]{${field.getAttribute("label")}}, "${field.fieldName}");
		}
#end
#if ( ${field.getAttribute("maxLength")} != "")
		if(${bean.modelName}.${field.getterName}()!=null && !StringUtil.isEmpty(${bean.modelName}.${field.getterName}()+"") && (${bean.modelName}.${field.getterName}()).length() > new Long("${field.getAttribute("maxLength")}")) {
			errors.reject("error.exceeds-max-length", new Object[]{${field.getAttribute("label")}}, "${field.fieldName}");
		}
#end
#if (${field.getAttribute("minAllowValue")} != "")
		if(${bean.modelName}.${field.getterName}()!=null && !StringUtil.isEmpty(${bean.modelName}.${field.getterName}()+"") && ${bean.modelName}.${field.getterName}() < new Long("${field.getAttribute("minAllowValue")}")) {
			errors.reject("error.below-min-value", new Object[]{${field.getAttribute("label")}}, "${field.fieldName}");
		}
#end
#if (${field.getAttribute("maxAllowValue")} != "")
		if(${bean.modelName}.${field.getterName}()!=null && !StringUtil.isEmpty(${bean.modelName}.${field.getterName}()+"") && ${bean.modelName}.${field.getterName}() > new Long("${field.getAttribute("maxAllowValue")}")) {
			errors.reject("error.exceeds-max-value", new Object[]{${field.getAttribute("label")}}, "${field.fieldName}");
		}
#end
#end
	}
}